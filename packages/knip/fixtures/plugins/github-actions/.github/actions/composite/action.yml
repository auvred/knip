name: Action Composite
description: Description

runs:
  using: 'composite'
  steps:
    - run: asdf install '${{ matrix.tool }}' '${{ steps.version.outputs.latest }}'
      shell: /bin/bash
    - run: cat var/logs/frontend.log
      shell: /bin/bash
    - run: cd code
      shell: /bin/bash
    - run: curl -X POST "https://example.org/${{ secrets.SECRET }}"
      shell: /bin/bash
    - run: docker-compose -f apps/site/docker-compose.dev.yml down
      shell: /bin/bash
    - run: docker-compose up -d && sleep 3
      shell: /bin/bash
    - run: git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      shell: /bin/bash
    - run: git config user.name "${GITHUB_ACTOR}"
      shell: /bin/bash
    - run: git pull --force --no-tags origin main:main
      shell: /bin/bash
    - run: kill -2 $(lsof -t -i:3000)
      shell: /bin/bash
    - run: node -r esbuild-register ./comment.ts
      shell: /bin/bash
    - run: node ./scripts/check-dependencies.js
      shell: /bin/bash
    - run: npm ci
      shell: /bin/bash
    - run: npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
      shell: /bin/bash
    - run: npm install
      shell: /bin/bash
    - run: npm install
      shell: /bin/bash
    - run: npm run build
      shell: /bin/bash
    - run: npm run publish
      shell: /bin/bash
    - run: npx playwright install --with-deps
      shell: /bin/bash
    - run: npx prisma migrate reset --force
      shell: /bin/bash
    - run: pnpm build
      shell: /bin/bash
    - run: pnpm eslint
      shell: /bin/bash
    - run: pnpm lint
      shell: /bin/bash
    - run: pnpm release-it
      shell: /bin/bash
    - run: pnpm run setup:test
      shell: /bin/bash
    - run: pnpm run test --coverage
      shell: /bin/bash
    - run: semgrep ci --sarif --output=semgrep.sarif
      shell: /bin/bash
    - run: unzip ${{ matrix.stack.name }}.zip
      shell: /bin/bash
    - run: yarn --frozen-lockfile
      shell: /bin/bash
    - run: yarn build
      shell: /bin/bash
    - run: yarn dev:seed-db
      shell: /bin/bash
    - run: yarn exec knip
      shell: /bin/bash
    - run: yarn install
      shell: /bin/bash
    - run: yarn nyc report --reporter=lcovonly --reporter=text
      shell: /bin/bash
    - run: yarn playwright install-deps chrome
      shell: /bin/bash
    - run: yarn playwright install-deps chrome
      shell: /bin/bash
    - run: yarn task --task compile --start-from=auto --no-link
      shell: /bin/bash
    - run: yarn workspace @apps/website exe script.ts
      shell: /bin/bash
    - run: yarn workspace @apps/website playwright test --project=e2e
      shell: /bin/bash
    - run: |
        echo "registry=https://registry.npmjs.org" >> ~/.npmrc
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
      shell: /bin/bash
    - run: |
        package=$(node ./script.js)
        echo "package=${package}" >> $GITHUB_OUTPUT
      shell: /bin/bash
    - run: |
        for STR in "A" "B"; do
          npx retry-cli@0.6.0 -- curl --output /dev/null --silent --write-out "@curl-format.txt" "${STR}"
          npx @scope/retry-cli@0.6.0 -- curl --output /dev/null --silent --write-out "@curl-format.txt" "${STR}"
        done
      shell: /bin/bash
    - run: |
        git push
        yarn changeset publish --tag canary
      shell: /bin/bash
    - run: |
        yarn dev:seed-db 2>&1 | tee var/logs/db.log &
        yarn wait-on --timeout 60000 tcp:0.0.0.0:27017
      shell: /bin/bash
    - run: |
        yarn workspace @apps/website build
        yarn workspace @apps/website start 2>&1 | tee var/logs/frontend.log &
        yarn wait-on --timeout 10000 http://0.0.0.0:3000
      shell: /bin/bash
    - run: |
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config user.name "${GITHUB_ACTOR}"
      shell: /bin/bash
    - run: |
        curl -X POST https://example.org/dispatches \
          -H 'Accept: application/vnd.github.v3+json' \
          -u ${{ secrets.SECRET }} \
          --data '{"event_type": "request-create-frontpage-branch" }}'
      shell: /bin/bash
    - run: |
        VERSION="v$(jq -r '.version' < package.json)"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        if [ "$(git tag --list "$VERSION")" ]; then
          echo 'released=true' >> "$GITHUB_OUTPUT"
        else
          echo 'released=false' >> "$GITHUB_OUTPUT"
          {
            echo 'release_notes<<EOF'
            node scripts/get-release-notes.js
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
        fi
      shell: /bin/bash
